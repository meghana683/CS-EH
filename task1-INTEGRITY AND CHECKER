import os, hashlib, json, argparse

HASH_FILE = "hashes.json"

def get_file_hash(path):
    h = hashlib.sha256()
    with open(path, "rb") as f:
        h.update(f.read())
    return h.hexdigest()

def scan(path):
    if os.path.isfile(path):
        return {path: get_file_hash(path)}
    hashes = {}
    for root, _, files in os.walk(path):
        for name in files:
            full = os.path.join(root, name)
            hashes[full] = get_file_hash(full)
    return hashes

def save(hashes):
    with open(HASH_FILE, "w") as f:
        json.dump(hashes, f)

def load():
    return json.load(open(HASH_FILE)) if os.path.exists(HASH_FILE) else {}

def check(old, new):
    for path in old:
        if path not in new:
            print(f"[MISSING] {path}")
        elif old[path] != new[path]:
            print(f"[MODIFIED] {path}")
    for path in new:
        if path not in old:
            print(f"[NEW] {path}")

if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument("mode", choices=["scan", "check"])
    p.add_argument("path")
    args = p.parse_args()

    current = scan(args.path)

    if args.mode == "scan":
        save(current)
        print("Hashes saved.")
    else:
        check(load(), current)
